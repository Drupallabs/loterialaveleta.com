<?php

use Drupal\sorteos\SorteosConnection;
use Drupal\Core\Render\Element;

function sorteos_cron()
{
  $soc = new SorteosConnection();
  //$soc->checkSorteos();
  // Coge los sorteos de la semana de Loteria nacional los lunes
  if (date("N") == "1") {
    $soc->checkSorteosLNAC();
  }
  //$values = drush_invoke_process("@site", "sir", array("all"), array("verbose"));
  //drupal_set_message('Ejecutando sorteos cron');
  //\Drupal::logger('sorteos')->error('Ejecutando sorteos cron');
}

/**
 * Implements hook_theme().
 */
function sorteos_theme()
{
  return [
    'sorteos' => [
      'render element' => 'children',
    ],
    'sorteo' => [
      'path' => '/sorteos',
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_product().
 */
function sorteos_theme_suggestions_sorteo_alter(array &$suggestions, array $variables, $hook)
{
  $original = $variables['theme_hook_original'];
  $entity = $variables['elements']['#sorteo'];
  $suggestions[] = $original . '__' . $entity->bundle();
  return $suggestions;
}

/**
 * Prepares variables for sorteo templates.
 *
 * Default template: commerce-product.html.twig.
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_sorteo(array &$variables)
{
  /** @var Drupal\sorteos\Entity\SorteoInterface $product */
  $sorteo = $variables['elements']['#sorteo'];

  $variables['sorteo_entity'] = $sorteo;
  $variables['sorteo'] = [];
  foreach (Element::children($variables['elements']) as $key) {

    $variables['sorteo'][$key] = $variables['elements'][$key];
  }
  if ($sorteo->getEscrutinio())
    $variables['sorteo']['escrutinio'] = array_values($sorteo->getEscrutinio());
  if ($sorteo->getEscrutinioJoker())
    $variables['sorteo']['escrutinio_joker'] = array_values($sorteo->getEscrutinioJoker());
}

function sorteos_form_alter(&$form, &$form_state, $form_id)
{
  /*if ($form['#entity_type'] == 'sorteo') {
    $form['actions']['submit']['#submit'][] = 'renombrar_resultados_archivos';
  }*/
}


function renombrar_resultados_archivos($form, &$form_state)
{
  if ($form_state->hasValue('resultados')) {
    if ($form_state->getValue('resultados')[0]['fids'] != null) {

      $fid_0 = $form_state->getValue('resultados')[0]['fids'][0];

      $tiposorteo = $form['form_id']['#value'];

      $id_sorteo = $form_state->getValue('id_sorteo')[0]['value'];
      $file_name = ucfirst($tiposorteo) . '-' . $id_sorteo;
      $file_name = trim(preg_replace("/[^0-9A-Za-z]/", '-', $file_name));

      try {
        $file = \Drupal\file\Entity\File::load($fid_0);

        $old_file_name = $file->getFilename();
        $old_file_name = preg_replace('/\\.[^.\\s]{3,4}$/', '', $file->getFilename());

        $new_filename_uri = str_replace($old_file_name, $file_name, $file->getFileUri());
        file_move($file, $new_filename_uri);
        dump($new_filename_uri);
        $file->setFilename($file_name);
        $file->setFileUri($new_filename_uri);
        $file->save();
      } catch (\Exception $e) {
        watchdog_exception('sorteos', $e);
      }
    }
  }
}
